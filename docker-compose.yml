version: '3.5'
services:
  app:
    build:
      context: ./docker-configuration
      dockerfile: ./Dockerfile
    image: otfeeds:latest
    container_name: otfeeds
#    restart: unless-stopped
#    tty: true
    environment:
      # These values are read from the .env file. Environmental parameters that are are passed from the docker-compose command
      #   take precedence over the ones defined in the .env file.
      # By default the .env file that is in the same directory as docker-compose.yml will always be used. This is unrelated
      #   to the .env file of Laravel, even though parameters may have the same name.
      # If the .env files of docker compose and Laravel need to be combined, the docker-compose.yml has to be in the same directory
      #   as the Laravel source code.
      # The following parameters are taking the values from the ENVIRONMENT, not the Laravel .env.
      #   The docker compose .env will DEFINE ENVIRONMENT PARAMETERS in the container.
      #   IF THE LARAVEL .env is combined with the DOCKER CONTAINER .env, then ALL THE LARAVEL .env PARAMETERS WILL ALSO
      #   BECOME ENVIRONMENT PARAMETERS IN THE CONTAINER (MEANING: IN THE LINUX INSTALLATION)
      # Environment parameters defined in the docker composer .env file, that are not referenced in this file, will not EXIST in the container
      XDEBUG_HOST: ${XDEBUG_HOST}
      APP_PORT: ${APP_PORT}
      APP_CONTAINER_PORT: ${APP_CONTAINER_PORT}
      APP_ENV: ${APP_ENV}
      APP_INDEX_DIRECTORY: ${APP_INDEX_DIRECTORY}
    networks:
      - otnet
    volumes:
      - ./app:/var/www/
# Causes issues when uncommented with the app.conf configuration file
#      - ./docker-configuration/nginx/conf.d/:/etc/nginx/conf.d/
      - ./docker-configuration/php-mods/local.ini:/usr/local/etc/php/conf.d/local.ini
    ports:
      - ${APP_PORT}:${APP_CONTAINER_PORT}
    working_dir: /var/www/

  redis:
    image: redis:alpine
    container_name: otfeedscache
    environment:
      REDIS_PORT: ${REDIS_PORT}
      REDIS_CONTAINER_PORT: ${REDIS_CONTAINER_PORT}
    ports:
      - ${REDIS_PORT}:${REDIS_CONTAINER_PORT}
    networks:
      - otnet
    volumes:
      - redisdata:/data

  otbsdb:
    image: mysql:5.6
    container_name: otbsdb
#    restart: unless-stopped
    environment:
      DB_PORT: ${DB_PORT}
      DB_CONTAINER_PORT: ${DB_CONTAINER_PORT}
      MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD}
      # Do not specify a database name. If done it will be created with a default collation and character_set (latin, not utf8)
#      MYSQL_DATABASE: ${DB_DATABASE}
      MYSQL_USER: ${DB_USER}
      MYSQL_PASSWORD: ${DB_PASSWORD}
      SERVICE_NAME: otbsdb
#    tty: true
    networks:
      - otnet
    ports:
      - ${DB_PORT}:${DB_CONTAINER_PORT}
    command: --default-authentication-plugin=mysql_native_password
    volumes:
      - otbsdbdata:/var/lib/mysql
      - ./docker-configuration/mysql/my.cnf:/etc/mysql/mysql.conf.d/my.cnf

  otnode:
    build:
      context: ./docker-configuration/node
      dockerfile: ./Dockerfile
    image: otfeeds/node:latest
    container_name: otnode
    networks:
      - otnet
    volumes:
      - .:/opt
    working_dir: /opt
    command: echo hi

networks:
  otnet:
    driver: bridge
    name: otnet

volumes:
  otbsdbdata:
    driver: local
  redisdata:
    driver: local
